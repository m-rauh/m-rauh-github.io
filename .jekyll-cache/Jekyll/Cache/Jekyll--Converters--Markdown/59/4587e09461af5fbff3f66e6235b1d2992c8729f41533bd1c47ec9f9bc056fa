I"d<h2 id="why-hash">Why <em>Hash</em>?</h2>
<p>Before breaking down what is Hash and how to implement it, letâ€™s understand where itâ€™s applicable and why.</p>

<p>Imagine youâ€™ve arrived at a city with a mission of delivering a package to a person named Frank Zappa. You have no prior knowledge of where he lives or any information that could help you find where to delivery the package. Your only option would be knock on every door of every apartment of every building, until you find <em>Frank Zappa</em>. If that sounds harsh, you can picture how this task would be nearly impossible in cities with millions of people such as SÃ£o Paulo, Jakarta, New York or Tokyo.</p>

<p>Even if you had a list with each personâ€™s name and their adresses, you would still have to search for <em>Frank</em> in this list among millions of other names. A computer faces a similiar problem when retrieving info from large databases.</p>

<p><strong>Hash</strong> helps getting around this. Imagine instead, with only a personâ€™s name you could do a mathematical manipulation and arrive at this personâ€™s address. No matter who, you would be able to use the same mathematical function. Thatâ€™s the proposal of a <strong>hash</strong>, going straight to the infoâ€™s source without having to search for it.</p>

<p>Of course, thatâ€™s not the only porpouse. It could be used to retrieve and join information faster, to quicly match an input with a database (for example biometric entry systems), to make a search mechanism and more.</p>

<h2 id="overview">Overview</h2>
<p>So, what is <strong>Hash</strong>?</p>

<p><strong>Hash</strong> consists of reorganize the information of given data structure so that the location of the data is correlated with the dataâ€™s key (such as the name, id or value). Therefore, itâ€™ll result in creating a function that transforms the key into a location.</p>

<p>Continuing our example, our transformation could be as simple as converting <em>â€˜Frank Zappaâ€™</em> to decimal. As in:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F=102 R=114 A=97 N=110 N=107 	==&gt; Frank = 10211497110107
Z=122 A=97 P=112 P=112 A=97	==&gt; Zappa = 1229711211297
Frank + Zappa = 10211497110107 + 1229711211297 = 11441208321404

key = 11441208321404

</code></pre></div></div>
<p>With the key in hands we need then to transform it to a reasonable location. For example, we could use the key to determinate <em>Frankâ€™s</em> ZIP Code:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Possible Zip Codes: 99999
key = 11441208321404

Frank's Zip Code: 11441208321404 % 99999 = 34631

</code></pre></div></div>
<p>In our example, Frank would be realocated to 34631, Arizona. So basically, knowing only <em>Frank Zappa</em> by his name we would reach his address doing only a few math. In reality, 34631 would be the position in a new data structure and we would have to rearrange all information (every citizen) to a new location.</p>

<p>You probably wondering what if the informationâ€™s key points to the same location as another. In fact that can happen and itâ€™s called <strong>collision</strong>. There are multiple ways of handling colision, in our example, it could be as simply as having more than one person in that given address. You would have to still knock door on door, but only in a few. The more you avoid it, the fewer you have to knock, but even with collisions, <strong>hashes</strong> are still faster.</p>

<div class="divider"></div>

<h2 id="minimal-implementation">Minimal Implementation</h2>
<p>This is a simple <strong>hash</strong>. The sole porpouse of this program is learn and practice the basics of Hash Function and Hash Tables. We used C++ only as a learning languague, we did not aim to any particular implementation. I recommend checking the <a href="https://github.com/m-rauh/hash-cpp">full code</a>. It will basically consist in 3 parts, assign a key and a position to every element, inserting this element in a new list and handling collisions when it happens.</p>

<h3 id="hash-function">Hash Function</h3>
<p>We used a hashfunction to determinated the position of a given object in the new array. This hash function is not optimal and itâ€™s supposed to be only an example:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">HashTable</span><span class="o">::</span><span class="n">hashfunction</span><span class="p">(</span><span class="n">string</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// create "unique" key and position for each element</span>

    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">distribution</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">id</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="kt">int</span><span class="p">(</span><span class="n">id</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="n">distribution</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">sum</span><span class="o">%</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">buckets</span><span class="p">);</span> <span class="c1">//where buckets is the size of your hash</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Then we inserted into a new list:</p>
<h3 id="handling-collisions">Handling Collisions</h3>

<div class="divider"></div>

<h2 id="further-reading">Further Reading</h2>

:ET